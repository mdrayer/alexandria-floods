{"version":3,"sources":["components/Charts/Chart.tsx","components/Charts/index.tsx","components/Intro/index.tsx","util/formatters.ts","components/Tables/Table.tsx","components/Tables/index.tsx","data/load.ts","util/diffMinutes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Chart","data","maxYValue","dataKey","syncId","width","height","margin","right","bottom","strokeDasharray","type","ticks","domain","label","value","position","offset","Math","ceil","undefined","verticalAlign","iconType","map","d","key","date","connectNulls","filter","a","elapsedTime","name","stroke","color","dot","Charts","floodData","nonFloodData","useState","showNonFloodData","setShowNonFloodData","flattenedData","flatten","max","rate","accumulation","className","id","checked","onChange","htmlFor","Intro","formatNumber","unit","isNumber","toFixed","Table","time","align","Tables","_","i","fetchCsv","path","csv","Date","Time","String","length","Number","load","nested","nest","rollup","maxRate","maxAccumulation","entries","sort","b","descending","diffMinutes","dateOne","dateTwo","diff","getTime","abs","round","floodDates","floodColors","nonFloodColors","App","setData","useEffect","then","includes","index","aboveThresholdIndex","findIndex","s","startIndex","startTime","thisTime","ascending","maxRateItem","find","maxRateDate","comparisonDate","role","href","target","rel","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d3455dc.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  // Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { DateItem } from '../../models/data';\n\ninterface ChartProps {\n  data: DateItem[];\n  maxYValue: number | null | undefined;\n  dataKey: 'accumulation' | 'rate';\n  syncId?: string;\n}\n\n/**\n * Displays data within a three hour window.\n */\nconst Chart = ({\n  data,\n  maxYValue,\n  dataKey,\n  syncId,\n}: ChartProps): JSX.Element => (\n  <ResponsiveContainer width=\"100%\" height={300}>\n    <LineChart syncId={syncId} margin={{ right: 5, bottom: 20 }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"elapsedTime\"\n        type=\"number\"\n        ticks={[0, 30, 60, 90, 120, 150, 180]}\n        domain={[0, 180]}\n        label={{\n          value: 'Elapsed time (minutes)',\n          position: 'bottom',\n          offset: 0,\n        }}\n      />\n      <YAxis\n        dataKey={dataKey}\n        width={20}\n        domain={(maxYValue && [0, Math.ceil(maxYValue)]) || undefined}\n      />\n      {/* <Tooltip labelFormatter={(i) => `${Number(i) * 15} minutes`} /> */}\n      <Legend verticalAlign=\"top\" iconType=\"square\" />\n      {data.map((d) => (\n        <Line\n          key={d.date}\n          connectNulls={true}\n          type=\"monotone\"\n          // We want to only show data within the domain.\n          data={d.data.filter((a) => a.elapsedTime <= 180)}\n          name={d.date}\n          dataKey={dataKey}\n          stroke={d.color}\n          dot={false}\n        />\n      ))}\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default Chart;\n","import React, { useState } from 'react';\nimport { flatten, max } from 'lodash-es';\n\nimport Chart from './Chart';\n\nimport { DateItem } from '../../models/data';\n\ninterface ChartProps {\n  floodData: DateItem[];\n  nonFloodData: DateItem[];\n}\n\nconst Charts = ({ floodData, nonFloodData }: ChartProps): JSX.Element => {\n  const [showNonFloodData, setShowNonFloodData] = useState(false);\n\n  const flattenedData = flatten([\n    ...floodData.map((a) => a.data),\n    ...nonFloodData.map((a) => a.data),\n  ]);\n  const maxYValue = max([\n    ...flattenedData.map((a) => a.rate),\n    ...flattenedData.map((a) => a.accumulation),\n  ]);\n\n  const data = [...floodData, ...(showNonFloodData ? nonFloodData : [])];\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col text-center\">\n          <h2>Precipitation events</h2>\n          <div>\n            <input\n              type=\"checkbox\"\n              id=\"show-non-flood\"\n              name=\"show-non-flood\"\n              checked={showNonFloodData}\n              onChange={() => setShowNonFloodData(!showNonFloodData)}\n              className=\"mr-1\"\n            />\n            <label htmlFor=\"show-non-flood\">\n              Show heavy rain events (non-flood)\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">Rate</h3>\n          <Chart data={data} maxYValue={maxYValue} dataKey=\"rate\" />\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">Total Accumulation</h3>\n          <Chart data={data} maxYValue={maxYValue} dataKey=\"accumulation\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Charts;\n","import React from 'react';\n\nconst Intro = (): JSX.Element => (\n  <div className=\"row\">\n    <div className=\"col\">\n      <p>\n        In the Hooffs Run/Blue Park neighborhood, we have had 3 major flood\n        events in 2019 and 2020: <strong>July 8, 2019</strong>;{' '}\n        <strong>July 23, 2020</strong>; and <strong>September 10, 2020</strong>.\n        Using local personal weather stations (PWS), we gathered data dating\n        back to October 2012 looking for major precipitation events (note that\n        only 2019 and 2020 data are currently in the app). In the charts below,\n        we show the <strong>precipition rate (inch per hour)</strong> and{' '}\n        <strong>total accumulation (inches)</strong> for selected flood and\n        heavy rain events. Flood events use reds/oranges/yellows, while heavy\n        rain events use blues/greens.\n      </p>\n    </div>\n  </div>\n);\n\nexport default Intro;\n","import isNumber from 'lodash-es/isNumber';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\n/** Time will come in the 24 hour format of just HHMM. Morph to HH:MM PP */\nconst formatTime = (time: string): string => {\n  const hour = Number(time.substring(0, 2));\n  const minute = time.substring(2);\n  const period = hour > 11 ? 'PM' : 'AM';\n  const newHour = hour % 12;\n  const newHourText = String(newHour === 0 ? 12 : newHour);\n  const leadingZero = newHourText.length === 2 ? '' : '0';\n\n  return `${leadingZero}${newHourText}:${minute} ${period}`;\n};\n\n/** Date will come as YYYY_MM_DD. Morph to \"MONTH DAY, YEAR.\" */\nconst formatDate = (date: string): string => {\n  const [year, month, day] = date.split('_');\n  return `${months[Number(month) - 1]} ${Number(day)}, ${year}`;\n};\n\nconst formatNumber = (\n  value: number | null | undefined,\n  unit: string = ''\n): string => {\n  return isNumber(value) ? value.toFixed(2) + unit : '—';\n};\n\nexport { formatTime, formatDate, formatNumber };\n","import React from 'react';\n\nimport { CsvData } from '../../models/data';\nimport { formatNumber } from '../../util/formatters';\n\ninterface TableProps {\n  data: CsvData[];\n}\n\nconst Table = ({ data }: TableProps): JSX.Element => (\n  <table>\n    <thead>\n      <tr>\n        <th>Time</th>\n        <th>Rate</th>\n        <th>Accum.</th>\n      </tr>\n    </thead>\n    <tbody>\n      {data.map((d) => (\n        <tr key={d.time}>\n          <th>{d.time}</th>\n          <td align=\"right\">{formatNumber(d.rate, ' in.')}</td>\n          <td align=\"right\">{formatNumber(d.accumulation, ' in.')}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default Table;\n","import React from 'react';\n\nimport { DateItem } from '../../models/data';\n\nimport Table from './Table';\n\ninterface TablesProps {\n  data: DateItem[];\n}\n\nconst Tables = ({ data }: TablesProps) => (\n  <div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2 className=\"text-center\">Detailed data for flood events</h2>\n      </div>\n    </div>\n    <div className=\"row\">\n      {data.map((d) => (\n        <div className=\"col-md-4\" key={d.date}>\n          <h3 className=\"text-center\">{d.date}</h3>\n          <Table data={d.data.filter((_, i) => i < 14)} />\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default Tables;\n","import { descending } from 'd3-array';\nimport { nest } from 'd3-collection';\nimport { csv } from 'd3-fetch';\nimport max from 'lodash-es/max';\n\nimport { CsvData, NestedData, NestedDataValue } from '../models/data';\n\nasync function fetchCsv(path: string): Promise<CsvData[]> {\n  return csv(path, (d) => {\n    // Gather data by column name.\n    const date = d.Date;\n    const time = d.Time;\n    const rate = d['Precip. Rate.'];\n    const accumulation = d['Precip. Accum.'];\n    return {\n      date: String(date),\n      time: String(time),\n      rate: !rate || rate.length === 0 ? null : Number(rate),\n      accumulation:\n        !accumulation || accumulation.length === 0\n          ? null\n          : Number(accumulation),\n    };\n  });\n}\n\nconst load = async (): Promise<NestedData[]> => {\n  const data = await fetchCsv('/alexandria-floods/data/all.csv');\n  const nested = nest<CsvData, NestedDataValue>()\n    .key((d) => d.date)\n    .rollup((d) => {\n      return {\n        maxRate: max(d.map((a) => a.rate)),\n        maxAccumulation: max(d.map((a) => a.accumulation)),\n        data: d,\n      };\n    })\n    .entries(data) as NestedData[];\n\n  return nested.sort((a, b) => descending(a.key, b.key));\n};\n\nexport default load;\n","/** Helper function to get different between Dates in minutes. */\nfunction diffMinutes(dateOne: Date, dateTwo: Date) {\n  const diff = (dateOne.getTime() - dateTwo.getTime()) / 1000 / 60;\n  return Math.abs(Math.round(diff));\n}\n\nexport default diffMinutes;\n","import { ascending } from 'd3-array';\nimport React, { useEffect, useState } from 'react';\n\nimport Charts from './components/Charts';\nimport Intro from './components/Intro';\nimport Tables from './components/Tables';\nimport load from './data/load';\nimport { DateItem, NestedData } from './models/data';\nimport diffMinutes from './util/diffMinutes';\nimport { formatNumber } from './util/formatters';\n\n// Rate threshold.\nconst threshold = 0.5;\n// Ideally, we want the index of the threshold data item to be third in the array.\nconst minThresholdIndex = 2;\n// List of dates with confirmed flooding in the Rosemont neighborhood.\nconst floodDates = ['2019-07-08', '2020-07-23', '2020-09-10'];\n\nconst floodColors = ['#c20000', '#ff5e00', '#ffce6c'];\nconst nonFloodColors = ['#000048', '#0044d1', '#69c0ff', '#45a183', '#008400'];\n\nfunction App() {\n  const [data, setData] = useState<NestedData[] | null>(null);\n\n  useEffect(() => {\n    // Load and set data on app initialization.\n    load().then(setData);\n  }, []);\n\n  const floodData: DateItem[] | null = data\n    ? data\n        // Filter to only certain dates.\n        .filter((d) => floodDates.includes(d.key))\n        .map((d, index) => {\n          // Find the first item that goes above the rate threshold.\n          const aboveThresholdIndex = d.value.data.findIndex(\n            (s) => s.rate && s.rate > threshold\n          );\n\n          // We want to try to have two points before the threshold point.\n          const canHaveBeforePoints = aboveThresholdIndex >= minThresholdIndex;\n          const startIndex = canHaveBeforePoints\n            ? aboveThresholdIndex - minThresholdIndex\n            : 0;\n\n          let startTime: Date | null = null;\n\n          return {\n            date: d.key,\n            data: d.value.data\n              .filter((_, i) => i >= startIndex)\n              .map((d, i) => {\n                if (!startTime) {\n                  startTime = new Date(`${d.date} ${d.time}`);\n                }\n\n                const thisTime = new Date(`${d.date} ${d.time}`);\n\n                return {\n                  ...d,\n                  elapsedTime: diffMinutes(startTime, thisTime),\n                };\n              })\n              .sort((a, b) => ascending(a.elapsedTime, b.elapsedTime)),\n            color: floodColors[index],\n          };\n        })\n    : null;\n\n  const nonFloodData: DateItem[] | null =\n    data &&\n    data\n      // Filter to only certain dates.\n      .filter((d) => !floodDates.includes(d.key))\n      .filter(\n        (d) =>\n          d.value.maxAccumulation &&\n          d.value.maxAccumulation >= 1.5 &&\n          d.value.maxRate &&\n          d.value.maxRate >= 1\n      )\n      .map((a, index) => {\n        // Find the item with the max rate. We will display our data based on that.\n        const maxRateItem = a.value.data.find(\n          (b) => b.rate === a.value.maxRate\n        );\n        const maxRateDate =\n          maxRateItem && new Date(`${maxRateItem.date} ${maxRateItem.time}`);\n\n        let startTime: Date | null = null;\n\n        return {\n          date: a.key,\n          data: a.value.data\n            .filter((b) => {\n              if (!maxRateDate) {\n                return true;\n              }\n\n              const comparisonDate = new Date(`${b.date} ${b.time}`);\n              const minuteDiff = diffMinutes(maxRateDate, comparisonDate);\n\n              return minuteDiff < 120;\n            })\n            .map((b, i) => {\n              if (!startTime) {\n                startTime = new Date(`${b.date} ${b.time}`);\n              }\n\n              const thisTime = new Date(`${b.date} ${b.time}`);\n\n              return {\n                ...b,\n                elapsedTime: diffMinutes(startTime, thisTime),\n              };\n            })\n            .sort((a, b) => ascending(a.elapsedTime, b.elapsedTime)),\n          color: nonFloodColors[index],\n        };\n      });\n\n  return (\n    <div className=\"container\">\n      <div className=\"header text-center\">\n        <h1>\n          Precipitation Stats for Major Flash Flood Events in Hooffs Run,\n          Alexandria,&nbsp;VA\n        </h1>\n      </div>\n      <Intro />\n      {floodData && nonFloodData ? (\n        <div>\n          <Charts floodData={floodData} nonFloodData={nonFloodData} />\n          <hr />\n          <Tables data={floodData} />\n        </div>\n      ) : (\n        <div className=\"row align-items-center\">\n          <div className=\"col text-center\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {data && (\n        <div className=\"row border-top mt-3 pt-2\">\n          <div className=\"col-lg-3\" />\n          <div className=\"col-lg-6\">\n            <h2 className=\"text-center\">Daily data</h2>\n            <table>\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Max precip. rate</th>\n                  <th>Total accumulation</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((d) => (\n                  <tr key={d.key}>\n                    <th>\n                      <a\n                        href={`https://www.wunderground.com/dashboard/pws/KVAALEXA9/table/${d.key}/${d.key}/daily#history-toolbar`}\n                      >\n                        {d.key}\n                      </a>\n                    </th>\n                    <td align=\"right\">\n                      {formatNumber(d.value.maxRate, ' in.')}\n                    </td>\n                    <td align=\"right\">\n                      {formatNumber(d.value.maxAccumulation, ' in.')}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"col-lg-3\" />\n        </div>\n      )}\n      <hr />\n      <div className=\"row\">\n        <div className=\"col text-center\">\n          <p className=\"mb-0\">\n            Data retrieved from{' '}\n            <a\n              href=\"https://www.wunderground.com/dashboard/pws/KVAALEXA9\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              PWS Rosemont Park - KVAALEXA9\n            </a>\n          </p>\n          <p>\n            Icons made by{' '}\n            <a\n              href=\"https://www.flaticon.com/authors/good-ware\"\n              title=\"Good Ware\"\n            >\n              Good Ware\n            </a>{' '}\n            from{' '}\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n              www.flaticon.com\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}