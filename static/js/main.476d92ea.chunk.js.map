{"version":3,"sources":["components/Charts/Chart.tsx","components/Charts/LegendSquare.tsx","components/Charts/index.tsx","components/Intro/index.tsx","util/formatters.ts","components/Tables/Table.tsx","components/Tables/index.tsx","data/load.ts","util/diffMinutes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Chart","data","maxYValue","dataKey","syncId","width","height","margin","right","bottom","strokeDasharray","type","ticks","domain","label","value","position","offset","Math","ceil","undefined","map","d","key","date","connectNulls","filter","a","elapsedTime","name","stroke","color","dot","LegendSquare","className","viewBox","fill","Charts","floodData","nonFloodData","useState","showNonFloodData","setShowNonFloodData","flattenedData","flatten","max","rate","accumulation","sort","b","descending","id","checked","onChange","htmlFor","Intro","formatNumber","unit","isNumber","toFixed","Table","time","align","Tables","_","i","fetchCsv","path","csv","Date","Time","String","length","Number","load","nested","nest","rollup","maxRate","maxAccumulation","entries","diffMinutes","dateOne","dateTwo","diff","getTime","abs","round","floodDates","floodColors","nonFloodColors","App","setData","useEffect","then","includes","index","aboveThresholdIndex","findIndex","s","startIndex","startTime","thisTime","ascending","maxRateItem","find","maxRateDate","comparisonDate","role","href","target","rel","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.476d92ea.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { DateItem } from '../../models/data';\n\ninterface ChartProps {\n  data: DateItem[];\n  maxYValue: number | null | undefined;\n  dataKey: 'accumulation' | 'rate';\n  syncId?: string;\n}\n\n/**\n * Displays data within a three hour window.\n */\nconst Chart = ({\n  data,\n  maxYValue,\n  dataKey,\n  syncId,\n}: ChartProps): JSX.Element => (\n  <ResponsiveContainer width=\"100%\" height={300}>\n    <LineChart syncId={syncId} margin={{ right: 5, bottom: 20 }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"elapsedTime\"\n        type=\"number\"\n        ticks={[0, 30, 60, 90, 120, 150, 180]}\n        domain={[0, 180]}\n        label={{\n          value: 'Elapsed time (minutes)',\n          position: 'bottom',\n          offset: 0,\n        }}\n      />\n      <YAxis\n        dataKey={dataKey}\n        width={20}\n        domain={(maxYValue && [0, Math.ceil(maxYValue)]) || undefined}\n      />\n      {data.map((d) => (\n        <Line\n          key={d.date}\n          connectNulls={true}\n          type=\"monotone\"\n          // We want to only show data within the domain.\n          data={d.data.filter((a) => a.elapsedTime <= 180)}\n          name={d.date}\n          dataKey={dataKey}\n          stroke={d.color}\n          dot={false}\n        />\n      ))}\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default Chart;\n","import React from 'react';\n\nconst squareLength = 12;\n\ninterface LegendSquareProps {\n  color: string;\n}\n\nconst LegendSquare = ({ color }: LegendSquareProps) => (\n  <svg\n    className=\"mr-1 align-middle d-inline-block\"\n    width={squareLength}\n    height={squareLength}\n    viewBox={`0 0 ${squareLength} ${squareLength}`}\n  >\n    <rect fill={color} width={squareLength} height={squareLength} />\n  </svg>\n);\n\nexport default LegendSquare;\n","import React, { useState } from 'react';\nimport { flatten, max } from 'lodash-es';\nimport { descending } from 'd3-array';\n\nimport { DateItem } from '../../models/data';\n\nimport Chart from './Chart';\nimport LegendSquare from './LegendSquare';\n\ninterface ChartProps {\n  floodData: DateItem[];\n  nonFloodData: DateItem[];\n}\n\nconst Charts = ({ floodData, nonFloodData }: ChartProps): JSX.Element => {\n  const [showNonFloodData, setShowNonFloodData] = useState(false);\n\n  const flattenedData = flatten([\n    ...floodData.map((a) => a.data),\n    ...nonFloodData.map((a) => a.data),\n  ]);\n  const maxYValue = max([\n    ...flattenedData.map((a) => a.rate),\n    ...flattenedData.map((a) => a.accumulation),\n  ]);\n\n  const data = [...floodData, ...(showNonFloodData ? nonFloodData : [])].sort(\n    (a, b) =>\n      // Sort by date to show most recent first.\n      descending(a.date, b.date)\n  );\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col text-center\">\n          <h2>Precipitation events</h2>\n          <div>\n            <input\n              type=\"checkbox\"\n              id=\"show-non-flood\"\n              name=\"show-non-flood\"\n              checked={showNonFloodData}\n              onChange={() => setShowNonFloodData(!showNonFloodData)}\n              className=\"mr-1 align-middle\"\n            />\n            <label htmlFor=\"show-non-flood\">\n              Show heavy rain events (non-flood)\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">Rate</h3>\n          <Chart data={data} maxYValue={maxYValue} dataKey=\"rate\" />\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">Total Accumulation</h3>\n          <Chart data={data} maxYValue={maxYValue} dataKey=\"accumulation\" />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"d-flex flex-wrap justify-content-center\">\n            {data.map((d) => (\n              <div key={d.date} className=\"px-1\">\n                <LegendSquare color={d.color} />\n                {d.date}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div className=\"row mt-2\">\n        <div className=\"col-sm-2\"></div>\n        <div className=\"col-sm-8\">\n          <div className=\"alert alert-info\">\n            <small>\n              Heavy rain non-flood days are defined as having a total\n              accumulation of over 1.5 inches and a maximum precipitation rate\n              of greater than or equal to 1.1 inches.\n            </small>\n          </div>\n        </div>\n        <div className=\"col-sm-2\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Charts;\n","import React from 'react';\n\nconst Intro = (): JSX.Element => (\n  <div className=\"row\">\n    <div className=\"col\">\n      <p>\n        In the Hooffs Run/Blue Park neighborhood, we have had 3 major flood\n        events in 2019 and 2020: <strong>July 8, 2019</strong>;{' '}\n        <strong>July 23, 2020</strong>; and <strong>September 10, 2020</strong>.\n        Using local personal weather stations (PWS), we gathered data dating\n        back to October 2012 looking for major precipitation events. In the\n        charts below, we show the{' '}\n        <strong>precipitation rate (inch per hour)</strong> and{' '}\n        <strong>total accumulation (inches)</strong> for selected flood and\n        heavy rain events. Flood events use reds/oranges/yellows, while heavy\n        rain events use blues/greens.\n      </p>\n    </div>\n  </div>\n);\n\nexport default Intro;\n","import isNumber from 'lodash-es/isNumber';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\n/** Time will come in the 24 hour format of just HHMM. Morph to HH:MM PP */\nconst formatTime = (time: string): string => {\n  const hour = Number(time.substring(0, 2));\n  const minute = time.substring(2);\n  const period = hour > 11 ? 'PM' : 'AM';\n  const newHour = hour % 12;\n  const newHourText = String(newHour === 0 ? 12 : newHour);\n  const leadingZero = newHourText.length === 2 ? '' : '0';\n\n  return `${leadingZero}${newHourText}:${minute} ${period}`;\n};\n\n/** Date will come as YYYY_MM_DD. Morph to \"MONTH DAY, YEAR.\" */\nconst formatDate = (date: string): string => {\n  const [year, month, day] = date.split('_');\n  return `${months[Number(month) - 1]} ${Number(day)}, ${year}`;\n};\n\nconst formatNumber = (\n  value: number | null | undefined,\n  unit: string = ''\n): string => {\n  return isNumber(value) ? value.toFixed(2) + unit : '—';\n};\n\nexport { formatTime, formatDate, formatNumber };\n","import React from 'react';\n\nimport { CsvData } from '../../models/data';\nimport { formatNumber } from '../../util/formatters';\n\ninterface TableProps {\n  data: CsvData[];\n}\n\nconst Table = ({ data }: TableProps): JSX.Element => (\n  <table>\n    <thead>\n      <tr>\n        <th>Time</th>\n        <th>Rate</th>\n        <th>Accum.</th>\n      </tr>\n    </thead>\n    <tbody>\n      {data.map((d) => (\n        <tr key={d.time}>\n          <th>{d.time}</th>\n          <td align=\"right\">{formatNumber(d.rate, ' in.')}</td>\n          <td align=\"right\">{formatNumber(d.accumulation, ' in.')}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default Table;\n","import React from 'react';\n\nimport { DateItem } from '../../models/data';\n\nimport Table from './Table';\n\ninterface TablesProps {\n  data: DateItem[];\n}\n\nconst Tables = ({ data }: TablesProps) => (\n  <div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2 className=\"text-center\">Detailed data for flood events</h2>\n      </div>\n    </div>\n    <div className=\"row\">\n      {data.map((d) => (\n        <div className=\"col-md-4\" key={d.date}>\n          <h3 className=\"text-center\">{d.date}</h3>\n          <Table data={d.data.filter((_, i) => i < 14)} />\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport default Tables;\n","import { descending } from 'd3-array';\nimport { nest } from 'd3-collection';\nimport { csv } from 'd3-fetch';\nimport max from 'lodash-es/max';\n\nimport { CsvData, NestedData, NestedDataValue } from '../models/data';\n\nasync function fetchCsv(path: string): Promise<CsvData[]> {\n  return csv(path, (d) => {\n    // Gather data by column name.\n    const date = d.Date;\n    const time = d.Time;\n    const rate = d['Precip. Rate.'];\n    const accumulation = d['Precip. Accum.'];\n    return {\n      date: String(date),\n      time: String(time),\n      rate: !rate || rate.length === 0 ? null : Number(rate),\n      accumulation:\n        !accumulation || accumulation.length === 0\n          ? null\n          : Number(accumulation),\n    };\n  });\n}\n\nconst load = async (): Promise<NestedData[]> => {\n  const data = await fetchCsv('/alexandria-floods/data/all.csv');\n  const nested = nest<CsvData, NestedDataValue>()\n    .key((d) => d.date)\n    .rollup((d) => {\n      return {\n        maxRate: max(d.map((a) => a.rate)),\n        maxAccumulation: max(d.map((a) => a.accumulation)),\n        data: d,\n      };\n    })\n    .entries(data) as NestedData[];\n\n  return nested.sort((a, b) => descending(a.key, b.key));\n};\n\nexport default load;\n","/** Helper function to get different between Dates in minutes. */\nfunction diffMinutes(dateOne: Date, dateTwo: Date) {\n  const diff = (dateOne.getTime() - dateTwo.getTime()) / 1000 / 60;\n  return Math.abs(Math.round(diff));\n}\n\nexport default diffMinutes;\n","import { ascending, descending } from 'd3-array';\nimport React, { useEffect, useState } from 'react';\n\nimport Charts from './components/Charts';\nimport Intro from './components/Intro';\nimport Tables from './components/Tables';\nimport load from './data/load';\nimport { DateItem, NestedData } from './models/data';\nimport diffMinutes from './util/diffMinutes';\nimport { formatNumber } from './util/formatters';\n\n// Rate threshold.\nconst threshold = 0.5;\n// Ideally, we want the index of the threshold data item to be third in the array.\nconst minThresholdIndex = 2;\n// List of dates with confirmed flooding in the Rosemont neighborhood.\nconst floodDates = ['2019-07-08', '2020-07-23', '2020-09-10'];\n\nconst floodColors = ['#c20000', '#ff5e00', '#ffce6c'];\nconst nonFloodColors = ['#000048', '#0044d1', '#69c0ff', '#45a183', '#008400'];\n\nfunction App() {\n  const [data, setData] = useState<NestedData[] | null>(null);\n\n  useEffect(() => {\n    // Load and set data on app initialization.\n    load().then(setData);\n  }, []);\n\n  const floodData: DateItem[] | null = data\n    ? data\n        // Filter to only certain dates.\n        .filter((d) => floodDates.includes(d.key))\n        .sort((a, b) =>\n          // Sort by max accumulation (descending).\n          descending(a.value.maxAccumulation || 0, b.value.maxAccumulation || 0)\n        )\n        .map((d, index) => {\n          // Find the first item that goes above the rate threshold.\n          const aboveThresholdIndex = d.value.data.findIndex(\n            (s) => s.rate && s.rate > threshold\n          );\n\n          // We want to try to have two points before the threshold point.\n          const canHaveBeforePoints = aboveThresholdIndex >= minThresholdIndex;\n          const startIndex = canHaveBeforePoints\n            ? aboveThresholdIndex - minThresholdIndex\n            : 0;\n\n          let startTime: Date | null = null;\n\n          return {\n            date: d.key,\n            data: d.value.data\n              .filter((_, i) => i >= startIndex)\n              .map((d, i) => {\n                if (!startTime) {\n                  startTime = new Date(`${d.date} ${d.time}`);\n                }\n\n                const thisTime = new Date(`${d.date} ${d.time}`);\n\n                return {\n                  ...d,\n                  elapsedTime: diffMinutes(startTime, thisTime),\n                };\n              })\n              .sort((a, b) => ascending(a.elapsedTime, b.elapsedTime)),\n            color: floodColors[index],\n          };\n        })\n    : null;\n\n  const nonFloodData: DateItem[] | null =\n    data &&\n    data\n      // Filter to only certain dates.\n      .filter((d) => !floodDates.includes(d.key))\n      .filter(\n        (d) =>\n          d.value.maxAccumulation &&\n          d.value.maxAccumulation >= 1.5 &&\n          d.value.maxRate &&\n          d.value.maxRate >= 1.1\n      )\n      .sort((a, b) =>\n        // Sort by max accumulation (descending).\n        descending(a.value.maxAccumulation || 0, b.value.maxAccumulation || 0)\n      )\n      .map((a, index) => {\n        // Find the item with the max rate. We will display our data based on that.\n        const maxRateItem = a.value.data.find(\n          (b) => b.rate === a.value.maxRate\n        );\n        const maxRateDate =\n          maxRateItem && new Date(`${maxRateItem.date} ${maxRateItem.time}`);\n\n        let startTime: Date | null = null;\n\n        return {\n          date: a.key,\n          data: a.value.data\n            .filter((b) => {\n              if (!maxRateDate) {\n                return true;\n              }\n\n              const comparisonDate = new Date(`${b.date} ${b.time}`);\n              const minuteDiff = diffMinutes(maxRateDate, comparisonDate);\n\n              return minuteDiff < 120;\n            })\n            .map((b) => {\n              if (!startTime) {\n                startTime = new Date(`${b.date} ${b.time}`);\n              }\n\n              const thisTime = new Date(`${b.date} ${b.time}`);\n\n              return {\n                ...b,\n                elapsedTime: diffMinutes(startTime, thisTime),\n              };\n            })\n            .sort((a, b) => ascending(a.elapsedTime, b.elapsedTime)),\n          color: nonFloodColors[index],\n        };\n      });\n\n  return (\n    <div className=\"container\">\n      <div className=\"header text-center\">\n        <h1>\n          Precipitation Stats for Major Flash Flood Events in Hooffs Run,\n          Alexandria,&nbsp;VA\n        </h1>\n      </div>\n      <Intro />\n      {floodData && nonFloodData ? (\n        <div>\n          <Charts floodData={floodData} nonFloodData={nonFloodData} />\n          <hr />\n          <Tables data={floodData} />\n        </div>\n      ) : (\n        <div className=\"row align-items-center\">\n          <div className=\"col text-center\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {data && (\n        <div className=\"row border-top mt-3 pt-2\">\n          <div className=\"col-lg-3\" />\n          <div className=\"col-lg-6\">\n            <h2 className=\"text-center\">Daily data</h2>\n            <table>\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Max precip. rate</th>\n                  <th>Total accumulation</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((d) => (\n                  <tr key={d.key}>\n                    <th>\n                      <a\n                        href={`https://www.wunderground.com/dashboard/pws/KVAALEXA9/table/${d.key}/${d.key}/daily#history-toolbar`}\n                      >\n                        {d.key}\n                      </a>\n                    </th>\n                    <td align=\"right\">\n                      {formatNumber(d.value.maxRate, ' in.')}\n                    </td>\n                    <td align=\"right\">\n                      {formatNumber(d.value.maxAccumulation, ' in.')}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"col-lg-3\" />\n        </div>\n      )}\n      <hr />\n      <div className=\"row\">\n        <div className=\"col text-center\">\n          <p className=\"mb-0\">\n            Data retrieved from{' '}\n            <a\n              href=\"https://www.wunderground.com/dashboard/pws/KVAALEXA9\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              PWS Rosemont Park - KVAALEXA9\n            </a>\n          </p>\n          <p>\n            Icons made by{' '}\n            <a\n              href=\"https://www.flaticon.com/authors/good-ware\"\n              title=\"Good Ware\"\n            >\n              Good Ware\n            </a>{' '}\n            from{' '}\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n              www.flaticon.com\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}