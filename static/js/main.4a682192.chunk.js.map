{"version":3,"sources":["models/PhNames.ts","components/Charts/Chart.tsx","components/Charts/LegendSquare.tsx","components/Charts/index.tsx","components/Intro/index.tsx","util/formatters.ts","components/Tables/Table.tsx","components/Tables/index.tsx","components/Tables/DailyData.tsx","data/load.ts","data/loadNwsData.ts","util/colors.ts","util/diffMinutes.ts","util/getDate.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PhNames","Chart","data","maxYValue","dataKey","syncId","width","height","margin","right","bottom","strokeDasharray","type","ticks","domain","label","value","position","offset","Math","ceil","undefined","map","d","key","date","connectNulls","filter","a","elapsedTime","name","stroke","color","dot","LegendSquare","className","viewBox","fill","Charts","floodData","nonFloodData","useState","showNonFloodData","setShowNonFloodData","flattenedData","flatten","max","rate","accumulation","sort","b","descending","id","checked","onChange","htmlFor","Intro","formatNumber","unit","isNumber","toFixed","Table","time","align","Tables","_","i","SortButton","currentSort","sortAsc","sortDesc","onClick","sortDirection","getWarnings","datum","uniq","ph_name","join","DailyData","nwsData","floodDates","setSort","tableData","useMemo","filteredWarnings","sig_name","FLASH_FLOOD","FLOOD","SEVERE_THUNDERSTORM","nestedWarnings","nest","issued","split","object","warnings","style","fontSize","ascending","maxAccumulation","maxRate","includes","href","fetchCsv","path","csv","Date","Time","String","length","Number","load","nested","rollup","entries","getString","val","trim","loadNwsData","iso_issued","iso_expired","expired","eventid","phenomena","significance","hvtec_nwsli","wfo","floodColors","nonFloodColors","diffMinutes","dateOne","dateTwo","diff","getTime","abs","round","getDate","year","month","day","hourMinute","period","parsedHour","minute","hour","dateObj","isNaN","console","warn","App","setData","setNwsData","useEffect","then","index","aboveThresholdIndex","findIndex","s","startIndex","startTime","thisTime","maxRateItemIndex","maxRateItem","maxRateDate","comparisonDate","role","target","rel","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a682192.chunk.js","sourcesContent":["enum PhNames {\n  SEVERE_THUNDERSTORM = 'Severe Thunderstorm',\n  FLASH_FLOOD = 'Flash Flood',\n  FLOOD = 'Flood',\n}\n\nexport default PhNames;\n","import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { DateItem } from '../../models/data';\n\ninterface ChartProps {\n  data: DateItem[];\n  maxYValue: number | null | undefined;\n  dataKey: 'accumulation' | 'rate';\n  syncId?: string;\n}\n\n/**\n * Displays data within a three hour window.\n */\nconst Chart = ({\n  data,\n  maxYValue,\n  dataKey,\n  syncId,\n}: ChartProps): JSX.Element => (\n  <ResponsiveContainer width=\"100%\" height={300}>\n    <LineChart syncId={syncId} margin={{ right: 5, bottom: 20 }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"elapsedTime\"\n        type=\"number\"\n        ticks={[0, 30, 60, 90, 120, 150, 180]}\n        domain={[0, 180]}\n        label={{\n          value: 'Elapsed time (minutes)',\n          position: 'bottom',\n          offset: 0,\n        }}\n      />\n      <YAxis\n        dataKey={dataKey}\n        width={20}\n        domain={(maxYValue && [0, Math.ceil(maxYValue)]) || undefined}\n      />\n      {data.map((d) => (\n        <Line\n          key={d.date}\n          connectNulls={true}\n          type=\"monotone\"\n          // We want to only show data within the domain.\n          data={d.data.filter((a) => a.elapsedTime <= 180)}\n          name={d.date}\n          dataKey={dataKey}\n          stroke={d.color}\n          dot={false}\n        />\n      ))}\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default Chart;\n","import React from 'react';\n\nconst squareLength = 12;\n\ninterface LegendSquareProps {\n  color: string;\n}\n\nconst LegendSquare = ({ color }: LegendSquareProps) => (\n  <svg\n    className=\"mr-1 align-middle d-inline-block\"\n    width={squareLength}\n    height={squareLength}\n    viewBox={`0 0 ${squareLength} ${squareLength}`}\n  >\n    <rect fill={color} width={squareLength} height={squareLength} />\n  </svg>\n);\n\nexport default LegendSquare;\n","import React, { useState } from 'react';\nimport { flatten, max } from 'lodash-es';\nimport { descending } from 'd3-array';\n\nimport { DateItem } from '../../models/data';\n\nimport Chart from './Chart';\nimport LegendSquare from './LegendSquare';\n\ninterface ChartProps {\n  floodData: DateItem[];\n  nonFloodData: DateItem[];\n}\n\nconst Charts = ({ floodData, nonFloodData }: ChartProps): JSX.Element => {\n  const [showNonFloodData, setShowNonFloodData] = useState(false);\n\n  const flattenedData = flatten([\n    ...floodData.map((a) => a.data),\n    ...nonFloodData.map((a) => a.data),\n  ]);\n  const maxYValue = max([\n    ...flattenedData.map((a) => a.rate),\n    ...flattenedData.map((a) => a.accumulation),\n  ]);\n\n  const data = [...floodData, ...(showNonFloodData ? nonFloodData : [])].sort(\n    (a, b) =>\n      // Sort by date to show most recent first.\n      descending(a.date, b.date)\n  );\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col text-center\">\n          <h2>Precipitation events</h2>\n          <div>\n            <input\n              type=\"checkbox\"\n              id=\"show-non-flood\"\n              name=\"show-non-flood\"\n              checked={showNonFloodData}\n              onChange={() => setShowNonFloodData(!showNonFloodData)}\n              className=\"mr-1 align-middle\"\n            />\n            <label htmlFor=\"show-non-flood\">\n              Show heavy rain events (non-flood)\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">Rate</h3>\n          <Chart data={data} maxYValue={maxYValue} dataKey=\"rate\" />\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">Total Accumulation</h3>\n          <Chart data={data} maxYValue={maxYValue} dataKey=\"accumulation\" />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"d-flex flex-wrap justify-content-center\">\n            {data.map((d) => (\n              <div key={d.date} className=\"px-1\">\n                <LegendSquare color={d.color} />\n                {d.date}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <div className=\"row mt-2\">\n        <div className=\"col-sm-2\"></div>\n        <div className=\"col-sm-8\">\n          <div className=\"alert alert-info\">\n            <small>\n              Heavy rain non-flood days are defined as having a total\n              accumulation of over 1.5 inches and a maximum precipitation rate\n              of greater than or equal to 1.1 inches. The peak rate for each\n              event is shown around the 80 elapsed minute mark in the chart to\n              show the sudden and intense precipitation leading up to it.\n            </small>\n          </div>\n        </div>\n        <div className=\"col-sm-2\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Charts;\n","import React from 'react';\n\nconst Intro = (): JSX.Element => (\n  <div className=\"row\">\n    <div className=\"col\">\n      <p>\n        In the Hooffs Run/Blue Park neighborhood, there have been 4 major flood\n        events in 2019, 2020, and 2021: <strong>July 8, 2019</strong>;{\" \"}\n        <strong>July 23, 2020</strong>; <strong>September 10, 2020</strong>; and{\" \"}\n        <strong>August 15, 2021</strong>. Using local personal weather stations\n        (PWS), we gathered data dating back to October 2012 looking for major\n        precipitation events. In the charts below, we show the{\" \"}\n        <strong>precipitation rate (inch per hour)</strong> and{\" \"}\n        <strong>total accumulation (inches)</strong> for selected flood and\n        heavy rain events. Flood events use reds/oranges/yellows, while heavy\n        rain events use blues/greens.\n      </p>\n    </div>\n  </div>\n);\n\nexport default Intro;\n","import isNumber from 'lodash-es/isNumber';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\n/** Time will come in the 24 hour format of just HHMM. Morph to HH:MM PP */\nconst formatTime = (time: string): string => {\n  const hour = Number(time.substring(0, 2));\n  const minute = time.substring(2);\n  const period = hour > 11 ? 'PM' : 'AM';\n  const newHour = hour % 12;\n  const newHourText = String(newHour === 0 ? 12 : newHour);\n  const leadingZero = newHourText.length === 2 ? '' : '0';\n\n  return `${leadingZero}${newHourText}:${minute} ${period}`;\n};\n\n/** Date will come as YYYY_MM_DD. Morph to \"MONTH DAY, YEAR.\" */\nconst formatDate = (date: string): string => {\n  const [year, month, day] = date.split('_');\n  return `${months[Number(month) - 1]} ${Number(day)}, ${year}`;\n};\n\nconst formatNumber = (\n  value: number | null | undefined,\n  unit: string = ''\n): string => {\n  return isNumber(value) ? value.toFixed(2) + unit : '—';\n};\n\nexport { formatTime, formatDate, formatNumber };\n","import React from 'react';\n\nimport { CsvData } from '../../models/data';\nimport { formatNumber } from '../../util/formatters';\n\ninterface TableProps {\n  data: CsvData[];\n}\n\nconst Table = ({ data }: TableProps): JSX.Element => (\n  <table>\n    <thead>\n      <tr>\n        <th>Time</th>\n        <th>Rate</th>\n        <th>Accum.</th>\n      </tr>\n    </thead>\n    <tbody>\n      {data.map((d) => (\n        <tr key={d.time}>\n          <th>{d.time}</th>\n          <td align=\"right\">{formatNumber(d.rate, ' in.')}</td>\n          <td align=\"right\">{formatNumber(d.accumulation, ' in.')}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default Table;\n","import { descending } from 'd3-array';\nimport React from 'react';\n\nimport { DateItem } from '../../models/data';\n\nimport Table from './Table';\n\ninterface TablesProps {\n  data: DateItem[];\n}\n\nconst Tables = ({ data }: TablesProps) => (\n  <div>\n    <div className=\"row\">\n      <div className=\"col\">\n        <h2 className=\"text-center\">Detailed data for flood events</h2>\n      </div>\n    </div>\n    <div className=\"row\">\n      {data\n        .sort((a, b) => descending(a.date, b.date))\n        .map((d) => (\n          <div className=\"col-lg-6 col-xl-3\" key={d.date}>\n            <h3 className=\"text-center\">{d.date}</h3>\n            <Table data={d.data.filter((_, i) => i < 14)} />\n          </div>\n        ))}\n    </div>\n  </div>\n);\n\nexport default Tables;\n","import { ascending, descending } from 'd3-array';\nimport { nest } from 'd3-collection';\nimport uniq from 'lodash-es/uniq';\nimport React, { useMemo, useState } from 'react';\n\nimport { NestedData } from '../../models/data';\nimport NwsData from '../../models/NwsData';\nimport PhNames from '../../models/PhNames';\nimport { formatNumber } from '../../util/formatters';\n\ninterface WarningsByDate {\n  [key: string]: NwsData[];\n}\n\ninterface DailyTableData extends NestedData {\n  warnings: string | null;\n}\n\ntype DailyTableSorts =\n  | 'date-asc'\n  | 'date-desc'\n  | 'rate-asc'\n  | 'rate-desc'\n  | 'accum-asc'\n  | 'accum-desc';\n\ninterface SortButtonProps {\n  currentSort: DailyTableSorts;\n  sortAsc: DailyTableSorts;\n  sortDesc: DailyTableSorts;\n  onClick: (newSort: DailyTableSorts) => void;\n  label: string;\n}\n\nconst SortButton = ({\n  currentSort,\n  sortAsc,\n  sortDesc,\n  onClick,\n  label,\n}: SortButtonProps) => {\n  let sortDirection: string = '';\n  if (currentSort === sortDesc) {\n    sortDirection = '-down';\n  } else if (currentSort === sortAsc) {\n    sortDirection = '-up';\n  }\n  return (\n    <button\n      className=\"btn text-white font-weight-bold\"\n      type=\"button\"\n      onClick={() => {\n        onClick(currentSort === sortDesc ? sortAsc : sortDesc);\n      }}\n    >\n      {label}&nbsp;\n      <i className={`fas fa-sort${sortDirection}`}></i>\n    </button>\n  );\n};\n\ninterface DailyDataProps {\n  data: NestedData[];\n  nwsData: NwsData[];\n  floodDates: string[];\n}\n\nconst DailyData = ({\n  data,\n  nwsData,\n  floodDates,\n}: DailyDataProps): JSX.Element => {\n  const [sort, setSort] = useState<DailyTableSorts>('date-desc');\n\n  const tableData: DailyTableData[] = useMemo(() => {\n    const filteredWarnings = nwsData.filter(\n      (d) =>\n        d.sig_name === 'Warning' &&\n        (d.ph_name === PhNames.FLASH_FLOOD ||\n          d.ph_name === PhNames.FLOOD ||\n          d.ph_name === PhNames.SEVERE_THUNDERSTORM)\n    );\n\n    const nestedWarnings: WarningsByDate = nest<NwsData>()\n      .key((d) => {\n        // `issued` string is formatted like `2020-09-10 20:14`.\n        // We want to get the date, so split on the space.\n        const [date] = d.issued.split(' ');\n        return date;\n      })\n      .object(filteredWarnings);\n    return data.map((d) => ({\n      ...d,\n      warnings: getWarnings(d.key, nestedWarnings),\n    }));\n  }, [data, nwsData]);\n\n  return (\n    <div className=\"row border-top justify-content-center mt-3 pt-3\">\n      <div className=\"col-lg-8\">\n        <h2 className=\"text-center\">Daily data for significant rain dates</h2>\n        <table>\n          <thead>\n            <tr>\n              <th style={{ width: '20%' }}>\n                <SortButton\n                  label=\"Date\"\n                  currentSort={sort}\n                  sortAsc=\"date-asc\"\n                  sortDesc=\"date-desc\"\n                  onClick={setSort}\n                />\n              </th>\n              <th style={{ width: '20%' }}>\n                <SortButton\n                  label=\"Max precip. rate\"\n                  currentSort={sort}\n                  sortAsc=\"rate-asc\"\n                  sortDesc=\"rate-desc\"\n                  onClick={setSort}\n                />\n              </th>\n              <th style={{ width: '20%' }}>\n                <SortButton\n                  label=\"Total accumulation\"\n                  currentSort={sort}\n                  sortAsc=\"accum-asc\"\n                  sortDesc=\"accum-desc\"\n                  onClick={setSort}\n                />\n              </th>\n              <th className=\"text-center\">\n                NWS Warnings\n                <br />\n                <small>issued that day</small>\n              </th>\n            </tr>\n          </thead>\n          <tbody style={{ fontSize: '0.8rem' }}>\n            {tableData\n              .sort((a, b) => {\n                switch (sort) {\n                  case 'accum-asc':\n                    return ascending(\n                      a.value.maxAccumulation || 0,\n                      b.value.maxAccumulation || 0\n                    );\n                  case 'accum-desc':\n                    return descending(\n                      a.value.maxAccumulation || 0,\n                      b.value.maxAccumulation || 0\n                    );\n                  case 'rate-asc':\n                    return ascending(\n                      a.value.maxRate || 0,\n                      b.value.maxRate || 0\n                    );\n                  case 'rate-desc':\n                    return descending(\n                      a.value.maxRate || 0,\n                      b.value.maxRate || 0\n                    );\n                  case 'date-asc':\n                    return ascending(a.key, b.key);\n                  case 'date-desc':\n                  default:\n                    return descending(a.key, b.key);\n                }\n              })\n              .map((d) => (\n                <tr\n                  key={d.key}\n                  className={\n                    floodDates.includes(d.key) ? 'flood-date' : undefined\n                  }\n                >\n                  <th>\n                    <a\n                      href={`https://www.wunderground.com/dashboard/pws/KVAALEXA9/table/${d.key}/${d.key}/daily#history-toolbar`}\n                      className={\n                        floodDates.includes(d.key) ? 'text-white' : undefined\n                      }\n                    >\n                      {d.key}\n                    </a>\n                  </th>\n                  <td align=\"right\">{formatNumber(d.value.maxRate, ' in.')}</td>\n                  <td align=\"right\">\n                    {formatNumber(d.value.maxAccumulation, ' in.')}\n                  </td>\n                  <td>{d.warnings}</td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nfunction getWarnings(date: string, data: WarningsByDate): string | null {\n  const datum = data[date];\n\n  if (!datum) {\n    return null;\n  }\n\n  return uniq(datum.map((d) => d.ph_name))\n    .sort()\n    .join(', ');\n}\n\nexport default DailyData;\n","import { descending } from 'd3-array';\nimport { nest } from 'd3-collection';\nimport { csv } from 'd3-fetch';\nimport max from 'lodash-es/max';\n\nimport { CsvData, NestedData, NestedDataValue } from '../models/data';\n\nasync function fetchCsv(path: string): Promise<CsvData[]> {\n  return csv(path, (d) => {\n    // Gather data by column name.\n    const date = d.Date;\n    const time = d.Time;\n    const rate = d['Precip. Rate.'];\n    const accumulation = d['Precip. Accum.'];\n    return {\n      date: String(date),\n      time: String(time),\n      rate: !rate || rate.length === 0 ? null : Number(rate),\n      accumulation:\n        !accumulation || accumulation.length === 0\n          ? null\n          : Number(accumulation),\n    };\n  });\n}\n\nconst load = async (): Promise<NestedData[]> => {\n  const data = await fetchCsv('/alexandria-floods/data/all.csv');\n  const nested = nest<CsvData, NestedDataValue>()\n    .key((d) => d.date)\n    .rollup((d) => {\n      return {\n        maxRate: max(d.map((a) => a.rate)),\n        maxAccumulation: max(d.map((a) => a.accumulation)),\n        data: d,\n      };\n    })\n    .entries(data) as NestedData[];\n\n  return nested.sort((a, b) => descending(a.key, b.key));\n};\n\nexport default load;\n","import { csv } from 'd3-fetch';\n\nimport NwsData from '../models/NwsData';\n\nconst csvFile = 'vtec_VAC510.csv';\n\nfunction getString(val: string | undefined): string {\n  return val ? val.trim() : '';\n}\n\nconst loadNwsData = (): Promise<NwsData[]> => {\n  return csv(`/alexandria-floods/data/${csvFile}`, (d) => {\n    return {\n      iso_issued: getString(d['iso_issued']),\n      issued: getString(d['issued']),\n      iso_expired: getString(d['iso_expired']),\n      expired: getString(d['expired']),\n      eventid: Number(getString(d.eventid)),\n      phenomena: getString(d['phenomena']),\n      significance: getString(d['significance']),\n      hvtec_nwsli: getString(d['hvtec_nwsli']),\n      wfo: getString(d['wfo']),\n      name: getString(d['name']),\n      ph_name: getString(d['ph_name']),\n      sig_name: getString(d['sig_name']),\n    };\n  });\n};\n\nexport default loadNwsData;\n","export const floodColors = ['#c2026f', '#f54352', '#ff882b', '#ffcc00'];\nexport const nonFloodColors = [\n  '#000048',\n  '#002871',\n  '#00437f',\n  '#005b6e',\n  '#007246',\n  '#008400',\n];\n","/** Helper function to get different between Dates in minutes. */\nfunction diffMinutes(dateOne: Date, dateTwo: Date) {\n  const diff = (dateOne.getTime() - dateTwo.getTime()) / 1000 / 60;\n  return Math.abs(Math.round(diff));\n}\n\nexport default diffMinutes;\n","/**\n * Get a date object based on given date and time strings.\n * @param date Date of the form `YYYY-MM-DD`\n * @param time Time of the form `HH:MM PP`\n * @example <caption>Typical usage</caption>\n * ```ts\n * const myDate = getDate('2020-09-13', '10:52 AM');\n * ```\n */\nfunction getDate(date: string, time: string): Date {\n  const [year, month, day] = date.split('-').map(Number);\n  const [hourMinute, period] = time.split(' ');\n  const [parsedHour, minute] = hourMinute.split(':').map(Number);\n  let hour = parsedHour;\n\n  // Date function expects hour to be in the 24 hour format.\n  // Make adjustments based on AM/PM.\n  if (period === 'PM') {\n    if (hour !== 12) {\n      // Add 12 to PM times.\n      hour += 12;\n    }\n  } else if (period === 'AM') {\n    // For midnight times, hour will be `12`. Reset it to `0`.\n    if (hour === 12) {\n      hour = 0;\n    }\n  }\n\n  const dateObj = new Date(year, month, day, hour, minute);\n\n  // Since the Date function does not warn us if an invalid date is supplied,\n  // do it ourselves.\n  if (!(dateObj instanceof Date && !isNaN(dateObj.getTime()))) {\n    console.warn(`Invalid date supplied to Date function. Check values:\n- date string: ${date}\n- time string: ${time}\n- parsed year: ${year}\n- parsed month: ${month}\n- parsed day: ${day}\n- parsed hour: ${parsedHour}\n- parsed minute: ${minute}\n- parsed time period: ${period}\n`);\n  }\n\n  return dateObj;\n}\n\nexport default getDate;\n","import { ascending, descending } from 'd3-array';\nimport React, { useEffect, useState } from 'react';\n\nimport Charts from './components/Charts';\nimport Intro from './components/Intro';\nimport Tables from './components/Tables';\nimport DailyData from './components/Tables/DailyData';\nimport load from './data/load';\nimport loadNwsData from './data/loadNwsData';\nimport { DateItem, NestedData } from './models/data';\nimport NwsData from './models/NwsData';\nimport { floodColors, nonFloodColors } from './util/colors';\nimport diffMinutes from './util/diffMinutes';\nimport getDate from './util/getDate';\n\n// Rate threshold.\nconst threshold = 0.5;\n// Ideally, we want the index of the threshold data item to be third in the array.\nconst minThresholdIndex = 2;\n// List of dates with confirmed flooding in the Rosemont neighborhood.\nconst floodDates = ['2019-07-08', '2020-07-23', '2020-09-10', '2021-08-15'];\n\nfunction App() {\n  const [data, setData] = useState<NestedData[] | null>(null);\n  const [nwsData, setNwsData] = useState<NwsData[] | null>(null);\n\n  useEffect(() => {\n    // Load and set data on app initialization.\n    load().then(setData);\n    loadNwsData().then(setNwsData);\n  }, []);\n\n  const floodData: DateItem[] | null = data\n    ? data\n        // Filter to only certain dates.\n        .filter((d) => floodDates.includes(d.key))\n        .sort((a, b) =>\n          // Sort by max accumulation (descending).\n          descending(a.value.maxAccumulation || 0, b.value.maxAccumulation || 0)\n        )\n        .map((d, index) => {\n          // Find the first item that goes above the rate threshold.\n          const aboveThresholdIndex = d.value.data.findIndex(\n            (s) => s.rate && s.rate > threshold\n          );\n\n          // We want to try to have two points before the threshold point.\n          const canHaveBeforePoints = aboveThresholdIndex >= minThresholdIndex;\n          const startIndex = canHaveBeforePoints\n            ? aboveThresholdIndex - minThresholdIndex\n            : 0;\n\n          let startTime: Date | null = null;\n\n          return {\n            date: d.key,\n            data: d.value.data\n              .filter((_, i) => i >= startIndex)\n              .map((d, i) => {\n                if (!startTime) {\n                  startTime = getDate(d.date, d.time);\n                }\n\n                const thisTime = getDate(d.date, d.time);\n\n                return {\n                  ...d,\n                  elapsedTime: diffMinutes(startTime, thisTime),\n                };\n              })\n              .sort((a, b) => ascending(a.elapsedTime, b.elapsedTime)),\n            color: floodColors[index],\n          };\n        })\n    : null;\n\n  const nonFloodData: DateItem[] | null =\n    data &&\n    data\n      // Filter to only certain dates.\n      .filter((d) => !floodDates.includes(d.key))\n      .filter(\n        (d) =>\n          d.value.maxAccumulation &&\n          d.value.maxAccumulation >= 1.5 &&\n          d.value.maxRate &&\n          d.value.maxRate >= 1.1\n      )\n      .sort((a, b) =>\n        // Sort by max accumulation (descending).\n        descending(a.value.maxAccumulation || 0, b.value.maxAccumulation || 0)\n      )\n      .map((a, index) => {\n        // Find the item with the max rate. We will display our data based on that.\n        const maxRateItemIndex = a.value.data.findIndex(\n          (b) => b.rate === a.value.maxRate\n        );\n        const maxRateItem =\n          maxRateItemIndex > -1 ? a.value.data[maxRateItemIndex] : undefined;\n        const maxRateDate =\n          maxRateItem && getDate(maxRateItem.date, maxRateItem.time);\n\n        let startTime: Date | null = null;\n\n        return {\n          date: a.key,\n          data: a.value.data\n            .filter((b, i) => {\n              if (!maxRateDate) {\n                return true;\n              }\n\n              if (i > maxRateItemIndex) {\n                return true;\n              }\n\n              const comparisonDate = getDate(b.date, b.time);\n              const minuteDiff = diffMinutes(maxRateDate, comparisonDate);\n\n              return minuteDiff <= 80;\n            })\n            .map((b) => {\n              if (!startTime) {\n                startTime = getDate(b.date, b.time);\n              }\n\n              const thisTime = getDate(b.date, b.time);\n\n              return {\n                ...b,\n                elapsedTime: diffMinutes(startTime, thisTime),\n              };\n            })\n            .sort((a, b) => ascending(a.elapsedTime, b.elapsedTime)),\n          color: nonFloodColors[index],\n        };\n      });\n\n  return (\n    <div className=\"container\">\n      <div className=\"header text-center\">\n        <h1>\n          Precipitation Stats for Major Flash Flood Events in Hooffs Run,\n          Alexandria,&nbsp;VA\n        </h1>\n      </div>\n      <Intro />\n      {floodData && nonFloodData ? (\n        <div>\n          <Charts floodData={floodData} nonFloodData={nonFloodData} />\n          <hr />\n          <Tables data={floodData} />\n        </div>\n      ) : (\n        <div className=\"row align-items-center\">\n          <div className=\"col text-center\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {data && nwsData ? (\n        <DailyData data={data} nwsData={nwsData} floodDates={floodDates} />\n      ) : null}\n      <hr />\n      <div className=\"row\">\n        <div className=\"col text-center\">\n          <p className=\"mb-0\">\n            Local weather data retrieved from{' '}\n            <a\n              href=\"https://www.wunderground.com/dashboard/pws/KVAALEXA9\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              PWS Rosemont Park - KVAALEXA9\n            </a>\n          </p>\n          <p className=\"mb-0\">\n            National Weather Service (NWS) Watch, Warning, and Advisories data\n            retrieved from{' '}\n            <a\n              href=\"https://mesonet.agron.iastate.edu/vtec/search.php#byugc/VA/VAC510/20000101/20200913\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Iowa State University\n            </a>\n          </p>\n          <p>\n            Icons made by{' '}\n            <a\n              href=\"https://www.flaticon.com/authors/good-ware\"\n              title=\"Good Ware\"\n            >\n              Good Ware\n            </a>{' '}\n            from{' '}\n            <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n              www.flaticon.com\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}