{"version":3,"sources":["components/Chart/index.tsx","util/formatters.ts","components/Tables/index.tsx","data/load.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","Chart","data","maxYValue","max","flatten","map","a","b","rate","accumulation","width","height","syncId","strokeDasharray","dataKey","type","tickFormatter","i","domain","Math","ceil","undefined","labelFormatter","Number","d","key","date","connectNulls","name","stroke","months","formatTime","time","hour","substring","minute","period","newHour","newHourText","String","leadingZero","length","formatDate","split","year","month","day","formatNumber","value","unit","isNumber","toFixed","Tables","className","dates","fetchCsv","path","csv","load","Promise","all","result","r","aboveThresholdIndex","findIndex","s","filter","_","index","App","useState","setData","useEffect","then","href","target","rel","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad70f723.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { flatten, max } from 'lodash-es';\n\nimport { DateItem } from '../../models/data';\n\nconst syncId = 'floodCharts';\n\n// TODO: DATES TO GET\n// September 11, 2011\n\nconst colors = ['#003f5c', '#bc5090', '#ffa600'];\n\ninterface ChartProps {\n  data: DateItem[];\n}\n\nconst Chart = ({ data }: ChartProps): JSX.Element => {\n  const maxYValue = max(\n    flatten([\n      ...data.map((a) => a.data.map((b) => b.rate)),\n      ...data.map((a) => a.data.map((b) => b.accumulation)),\n    ])\n  );\n\n  return (\n    <div>\n      <h2>Precipitation Rate (inches per hour)</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart syncId={syncId}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"index\" type=\"number\" tickFormatter={(i) => i * 15} />\n          <YAxis\n            dataKey=\"rate\"\n            domain={(maxYValue && [0, Math.ceil(maxYValue)]) || undefined}\n          />\n          <Tooltip labelFormatter={(i) => `${Number(i) * 15} minutes`} />\n          <Legend />\n          {data.map((d, i) => (\n            <Line\n              key={d.date}\n              connectNulls={true}\n              type=\"monotone\"\n              data={d.data}\n              name={d.date}\n              dataKey=\"rate\"\n              stroke={colors[i]}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n      <h2>Total accumulation (inches)</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart syncId={syncId}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"index\" type=\"number\" tickFormatter={(i) => i * 15} />\n          <YAxis\n            dataKey=\"accumulation\"\n            domain={(maxYValue && [0, Math.ceil(maxYValue)]) || undefined}\n          />\n          <Tooltip labelFormatter={(i) => `${Number(i) * 15} minutes`} />\n          <Legend />\n          {data.map((d, i) => (\n            <Line\n              key={d.date}\n              connectNulls={true}\n              type=\"monotone\"\n              data={d.data}\n              name={d.date}\n              dataKey=\"accumulation\"\n              stroke={colors[i]}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default Chart;\n","import isNumber from 'lodash-es/isNumber';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\n/** Time will come in the 24 hour format of just HHMM. Morph to HH:MM PP */\nconst formatTime = (time: string): string => {\n  const hour = Number(time.substring(0, 2));\n  const minute = time.substring(2);\n  const period = hour > 12 ? 'PM' : 'AM';\n  const newHour = hour % 12;\n  const newHourText = String(newHour === 0 ? 12 : newHour);\n  const leadingZero = newHourText.length === 2 ? '' : '0';\n\n  return `${leadingZero}${newHourText}:${minute} ${period}`;\n};\n\n/** Date will come as YYYY_MM_DD. Morph to \"MONTH DAY, YEAR.\" */\nconst formatDate = (date: string): string => {\n  const [year, month, day] = date.split('_');\n  return `${months[Number(month) - 1]} ${Number(day)}, ${year}`;\n};\n\nconst formatNumber = (\n  value: number | null | undefined,\n  unit: string = ''\n): string => {\n  return isNumber(value) ? value.toFixed(2) + unit : 'â€”';\n};\n\nexport { formatTime, formatDate, formatNumber };\n","import React from 'react';\n\nimport { DateItem } from '../../models/data';\nimport { formatNumber } from '../../util/formatters';\n\ninterface TablesProps {\n  data: DateItem[];\n}\n\nconst Tables = ({ data }: TablesProps) => {\n  return (\n    <div>\n      <div className=\"row\">\n        <h2>Data by date</h2>\n      </div>\n      <div className=\"row\">\n        {data.map((d) => (\n          <div className=\"col-sm\" key={d.date}>\n            <h3>{d.date}</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>Rate</th>\n                  <th>Accumulation</th>\n                </tr>\n              </thead>\n              <tbody>\n                {d.data.map((d) => (\n                  <tr key={d.time}>\n                    <th>{d.time}</th>\n                    <td>{formatNumber(d.rate, ' in.')}</td>\n                    <td>{formatNumber(d.accumulation, ' in.')}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Tables;\n","import { csv } from 'd3-fetch';\n\nimport { CsvData, DateItem } from '../models/data';\nimport { formatDate, formatTime } from '../util/formatters';\n\nconst dates = ['2019_07_08', '2020_07_23', '2020_09_10'];\nconst threshhold = 0.5;\n\nasync function fetchCsv(path: string, date: string): Promise<CsvData[]> {\n  return csv(path, (d) => {\n    return {\n      date: formatDate(date),\n      time: (d.time && formatTime(d.time)) || '',\n      rate: !d.rate || d.rate.length === 0 ? null : Number(d.rate),\n      accumulation:\n        !d.accumulation || d.accumulation.length === 0\n          ? null\n          : Number(d.accumulation),\n    };\n  });\n}\n\nconst load = async (): Promise<DateItem[]> => {\n  const result = await Promise.all(\n    dates.map((d) => fetchCsv(`/alexandria-floods/data/${d}.csv`, d))\n  );\n  return result.map((r) => {\n    // Find the first item that goes above the rate threshold.\n    const aboveThresholdIndex = r.findIndex(\n      (s) => s.rate && s.rate > threshhold\n    );\n    return {\n      date: r[0].date,\n      data: r\n        .filter((_, i) =>\n          aboveThresholdIndex > 3 ? i > aboveThresholdIndex - 4 : true\n        )\n        .map((d, index) => ({\n          ...d,\n          index,\n        })),\n    };\n  });\n};\n\nexport default load;\n","import React, { useEffect, useState } from 'react';\n\nimport Chart from './components/Chart';\nimport Tables from './components/Tables';\nimport load from './data/load';\nimport { DateItem } from './models/data';\n\nfunction App() {\n  const [data, setData] = useState<DateItem[] | null>(null);\n\n  useEffect(() => {\n    // Load and set data on app initialization.\n    load().then(setData);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"header text-center\">\n        <h1>Precipitation Stats for Major Flood Events in Alexandria, VA</h1>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <p className=\"text-center\">\n            Data retrieved from PWS Rosemont Park - KVAALEXA9:{' '}\n            <a\n              href=\"https://www.wunderground.com/dashboard/pws/KVAALEXA9\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              https://www.wunderground.com/dashboard/pws/KVAALEXA9\n            </a>\n          </p>\n        </div>\n      </div>\n      {data ? (\n        <div>\n          <Chart data={data} />\n          <Tables data={data} />\n        </div>\n      ) : (\n        <div className=\"row align-items-center\">\n          <div className=\"col text-center\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}