{"version":3,"sources":["components/Charts/Chart.tsx","components/Charts/index.tsx","util/formatters.ts","components/Tables/index.tsx","data/load.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","Chart","data","maxYValue","dataKey","syncId","width","height","margin","right","bottom","strokeDasharray","type","ticks","domain","label","value","position","offset","Math","ceil","undefined","verticalAlign","map","d","i","key","date","connectNulls","filter","a","elapsedTime","name","stroke","Charts","flattenedData","flatten","max","rate","accumulation","className","formatNumber","unit","isNumber","toFixed","Tables","time","align","dates","diffMinutes","dateOne","dateTwo","diff","getTime","abs","round","fetchCsv","path","csv","Date","Time","String","length","Number","load","Promise","all","result","r","aboveThresholdIndex","findIndex","s","startIndex","lastIndex","startTime","_","thisTime","App","useState","setData","useEffect","then","href","target","rel","role","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e708c8f3.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  // Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { DateItem } from '../../models/data';\n\nconst colors = ['#003f5c', '#bc5090', '#ffa600'];\n\ninterface ChartProps {\n  data: DateItem[];\n  maxYValue: number | null | undefined;\n  dataKey: 'accumulation' | 'rate';\n  syncId?: string;\n}\n\nconst Chart = ({\n  data,\n  maxYValue,\n  dataKey,\n  syncId,\n}: ChartProps): JSX.Element => (\n  <ResponsiveContainer width=\"100%\" height={300}>\n    <LineChart syncId={syncId} margin={{ right: 5, bottom: 20 }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        dataKey=\"elapsedTime\"\n        type=\"number\"\n        ticks={[0, 30, 60, 90, 120, 150, 180]}\n        domain={[0, 180]}\n        label={{\n          value: 'Elapsed time (minutes)',\n          position: 'bottom',\n          offset: 0,\n        }}\n      />\n      <YAxis\n        dataKey={dataKey}\n        width={20}\n        domain={(maxYValue && [0, Math.ceil(maxYValue)]) || undefined}\n      />\n      {/* <Tooltip labelFormatter={(i) => `${Number(i) * 15} minutes`} /> */}\n      <Legend verticalAlign=\"top\" />\n      {data.map((d, i) => (\n        <Line\n          key={d.date}\n          connectNulls={true}\n          type=\"monotone\"\n          // We want to only show data within the domain.\n          data={d.data.filter((a) => a.elapsedTime <= 180)}\n          name={d.date}\n          dataKey={dataKey}\n          stroke={colors[i]}\n        />\n      ))}\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default Chart;\n","import React from 'react';\nimport { flatten, max } from 'lodash-es';\n\nimport { DateItem } from '../../models/data';\nimport Chart from './Chart';\n\n// TODO: DATES TO GET\n// September 11, 2011\n\ninterface ChartProps {\n  data: DateItem[];\n}\n\nconst Charts = ({ data }: ChartProps): JSX.Element => {\n  const flattenedData = flatten(data.map((a) => a.data));\n  const maxYValue = max([\n    ...flattenedData.map((a) => a.rate),\n    ...flattenedData.map((a) => a.accumulation),\n  ]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-lg-6\">\n        <h2 className=\"text-center\">Precipitation Rate (inches per hour)</h2>\n        <Chart data={data} maxYValue={maxYValue} dataKey=\"rate\" />\n      </div>\n      <div className=\"col-lg-6\">\n        <h2 className=\"text-center\">Total accumulation (inches)</h2>\n        <Chart data={data} maxYValue={maxYValue} dataKey=\"accumulation\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Charts;\n","import isNumber from 'lodash-es/isNumber';\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\n/** Time will come in the 24 hour format of just HHMM. Morph to HH:MM PP */\nconst formatTime = (time: string): string => {\n  const hour = Number(time.substring(0, 2));\n  const minute = time.substring(2);\n  const period = hour > 11 ? 'PM' : 'AM';\n  const newHour = hour % 12;\n  const newHourText = String(newHour === 0 ? 12 : newHour);\n  const leadingZero = newHourText.length === 2 ? '' : '0';\n\n  return `${leadingZero}${newHourText}:${minute} ${period}`;\n};\n\n/** Date will come as YYYY_MM_DD. Morph to \"MONTH DAY, YEAR.\" */\nconst formatDate = (date: string): string => {\n  const [year, month, day] = date.split('_');\n  return `${months[Number(month) - 1]} ${Number(day)}, ${year}`;\n};\n\nconst formatNumber = (\n  value: number | null | undefined,\n  unit: string = ''\n): string => {\n  return isNumber(value) ? value.toFixed(2) + unit : 'â€”';\n};\n\nexport { formatTime, formatDate, formatNumber };\n","import React from 'react';\n\nimport { DateItem } from '../../models/data';\nimport { formatNumber } from '../../util/formatters';\n\ninterface TablesProps {\n  data: DateItem[];\n}\n\nconst Tables = ({ data }: TablesProps) => {\n  return (\n    <div className=\"row\">\n      {data.map((d) => (\n        <div className=\"col-md-4\" key={d.date}>\n          <h3 className=\"text-center\">{d.date}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>Time</th>\n                <th>Rate</th>\n                <th>Accumulation</th>\n              </tr>\n            </thead>\n            <tbody>\n              {d.data.map((d) => (\n                <tr key={d.time}>\n                  <th>{d.time}</th>\n                  <td align=\"right\">{formatNumber(d.rate, ' in.')}</td>\n                  <td align=\"right\">{formatNumber(d.accumulation, ' in.')}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Tables;\n","import { csv } from 'd3-fetch';\n\nimport { CsvData, DateItem } from '../models/data';\n\nconst dates = ['2019_07_08', '2020_07_23', '2020_09_10'];\nconst threshhold = 0.5;\n\n/** Helper function to get different between Dates in minutes. */\nfunction diffMinutes(dateOne: Date, dateTwo: Date) {\n  const diff = (dateOne.getTime() - dateTwo.getTime()) / 1000 / 60;\n  return Math.abs(Math.round(diff));\n}\n\nasync function fetchCsv(path: string): Promise<CsvData[]> {\n  return csv(path, (d) => {\n    // Gather data by column name.\n    const date = d.Date;\n    const time = d.Time;\n    const rate = d['Precip. Rate.'];\n    const accumulation = d['Precip. Accum.'];\n    return {\n      date: String(date),\n      time: String(time),\n      rate: !rate || rate.length === 0 ? null : Number(rate),\n      accumulation:\n        !accumulation || accumulation.length === 0\n          ? null\n          : Number(accumulation),\n    };\n  });\n}\n\n// The amount of data points we want to show (for now).\nconst count = 13;\n// Ideally, we want the index of the threshold data item to be third in the array.\nconst minThresholdIndex = 2;\n\nconst load = async (): Promise<DateItem[]> => {\n  const result = await Promise.all(\n    dates.map((d) => fetchCsv(`/alexandria-floods/data/${d}.csv`))\n  );\n  return result.map((r) => {\n    // Find the first item that goes above the rate threshold.\n    const aboveThresholdIndex = r.findIndex(\n      (s) => s.rate && s.rate > threshhold\n    );\n\n    // We want to try to have two points before the threshold point.\n    const canHaveBeforePoints = aboveThresholdIndex >= minThresholdIndex;\n    const startIndex = canHaveBeforePoints\n      ? aboveThresholdIndex - minThresholdIndex\n      : 0;\n    const lastIndex = startIndex + count;\n\n    let startTime: Date | null = null;\n\n    return {\n      date: r[0].date,\n      data: r\n        .filter((_, i) => i >= startIndex && i < lastIndex)\n        .map((d) => {\n          if (!startTime) {\n            startTime = new Date(`${d.date} ${d.time}`);\n          }\n\n          const thisTime = new Date(`${d.date} ${d.time}`);\n\n          return {\n            ...d,\n            elapsedTime: diffMinutes(startTime, thisTime),\n          };\n        }),\n    };\n  });\n};\n\nexport default load;\n","import React, { useEffect, useState } from 'react';\n\nimport Charts from './components/Charts';\nimport Tables from './components/Tables';\nimport load from './data/load';\nimport { DateItem } from './models/data';\n\nfunction App() {\n  const [data, setData] = useState<DateItem[] | null>(null);\n\n  useEffect(() => {\n    // Load and set data on app initialization.\n    load().then(setData);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"header text-center\">\n        <h1>\n          Precipitation Stats for Major Flash Flood Events in\n          Alexandria,&nbsp;VA\n        </h1>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <p className=\"text-center\">\n            Data retrieved from{' '}\n            <a\n              href=\"https://www.wunderground.com/dashboard/pws/KVAALEXA9\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              PWS Rosemont Park - KVAALEXA9\n            </a>\n          </p>\n        </div>\n      </div>\n      {data ? (\n        <div>\n          <Charts data={data} />\n          <Tables data={data} />\n        </div>\n      ) : (\n        <div className=\"row align-items-center\">\n          <div className=\"col text-center\">\n            <div className=\"spinner-border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"row border-top mt-3\">\n        <div className=\"col text-center\">\n          Icons made by{' '}\n          <a\n            href=\"https://www.flaticon.com/authors/good-ware\"\n            title=\"Good Ware\"\n          >\n            Good Ware\n          </a>{' '}\n          from{' '}\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n            www.flaticon.com\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}